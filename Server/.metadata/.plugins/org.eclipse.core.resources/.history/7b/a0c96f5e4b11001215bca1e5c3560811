package org.jason.server;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InterfaceAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Enumeration;
import java.util.List;

import javax.jmdns.JmDNS;
import javax.jmdns.ServiceEvent;
import javax.jmdns.ServiceInfo;
import javax.jmdns.ServiceListener;
import javax.jmdns.impl.DNSEntry;
import javax.jmdns.impl.JmDNSImpl;

import org.jason.network.model.ServerSocket;

public class UDPServerSocketImpl extends Thread implements ServerSocket {

	private DatagramSocket serverSocket;
	
	public UDPServerSocketImpl() {
		this.start();
		//becomeClient();
		//becomeServer();
	}
	
	@Override
	public void run(){
		try {
			setupSocket();
			byte[] receivedBuffer = new byte[128];
			System.out.println("Waiting for connection");
			serverSocket.receive(new DatagramPacket(receivedBuffer, receivedBuffer.length));
			String clientMessage = new String(receivedBuffer, "UTF-8");
			System.out.println("Client message: " + clientMessage);
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void advertise(){
		try {
			byte[] bufferToSend = "Test String from the server".getBytes();
			DatagramSocket serverSocket = new DatagramSocket();
			
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void becomeClient() {
		String helloServer = "Yo!";
		byte[] buffer = helloServer.getBytes();

		try {
			DatagramSocket socket = new DatagramSocket();
			socket.setBroadcast(true);
			// while (true) {

			DatagramPacket packet = new DatagramPacket(buffer, buffer.length,
					InetAddress.getByName("255.255.255.255"), 8888);
			socket.send(packet);
			System.out.println("sent a message");
			
			Enumeration interfaces = NetworkInterface.getNetworkInterfaces();
			while (interfaces.hasMoreElements()) {
				NetworkInterface networkInterface = (NetworkInterface) interfaces.nextElement();

				if (networkInterface.isLoopback() || !networkInterface.isUp()) {
					continue; // Don't want to broadcast to the loopback
								// interface
				}

				for (InterfaceAddress interfaceAddress : networkInterface
						.getInterfaceAddresses()) {
					InetAddress broadcast = interfaceAddress.getBroadcast();
					if (broadcast == null) {
						continue;
					}

					// Send the broadcast package!
					try {
						DatagramPacket sendPacket = new DatagramPacket(
								buffer, buffer.length, broadcast, 8888);
						socket.send(sendPacket);
					} catch (Exception e) {
					}

					System.out.println(getClass().getName()
							+ ">>> Request packet sent to: "
							+ broadcast.getHostAddress() + "; Interface: "
							+ networkInterface.getDisplayName());
				}
			}
			/*
			 * DatagramPacket packet2 = new DatagramPacket(buffer,
			 * buffer.length, InetAddress.getByName("172.25.255.255"), 8888);
			 * 
			 * socket.send(packet2);
			 */
			// Thread.sleep(500);
			// }
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void becomeServer() {
		DatagramSocket socket = null;
		try {
			socket = new DatagramSocket(8888, InetAddress.getByName("0.0.0.0"));

			socket.setBroadcast(true);

			socket.setSoTimeout(5000);
		} catch (SocketException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		while (true) {
			try {
				byte[] buffer = new byte[1024];
				DatagramPacket packet = new DatagramPacket(buffer,
						buffer.length);
				System.out.println("Waiting for a reply");
				socket.receive(packet);
				String receivedString = new String(buffer);
				System.out.println("Received from phone: " + receivedString + " socket: " + packet.getSocketAddress().toString());
				break;
			} catch (SocketException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	@Override
	public void setupSocket() throws SocketException {
		// TODO Auto-generated method stub
		serverSocket = new DatagramSocket();
		serverSocket.setBroadcast(true);
	}

	@Override
	public void sendData(byte[] buffer) throws IOException {
		// TODO Auto-generated method stub
		//DatagramPacket
	}

	@Override
	public void killThread() {
		// TODO Auto-generated method stub

	}

}
