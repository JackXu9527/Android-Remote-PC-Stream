package org.jason.server;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InterfaceAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Enumeration;
import java.util.List;

import javax.jmdns.JmDNS;
import javax.jmdns.ServiceEvent;
import javax.jmdns.ServiceInfo;
import javax.jmdns.ServiceListener;
import javax.jmdns.impl.DNSEntry;
import javax.jmdns.impl.JmDNSImpl;

import org.jason.network.model.ServerSocket;

public class UDPServerSocketImpl extends Thread implements ServerSocket {
	private static final String INADDR_ANY = "0.0.0.0";
	private static final int PORT = 9999;
	private DatagramSocket serverSocket;
	
	
	public UDPServerSocketImpl() {
		this.start();
	}
	
	@Override
	public void run(){
		byte[] receivedBuffer = new byte[128];
		try {
			setupSocket();
			
			System.out.println("Server is listening to any client request! ");
			
			serverSocket.receive(new DatagramPacket(receivedBuffer, receivedBuffer.length));
			String clientMessage = new String(receivedBuffer, "UTF-8");
			
			System.out.println("Client message [ " + clientMessage + " ]");
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	@Override
	public void setupSocket() throws SocketException, UnknownHostException{
		serverSocket = new DatagramSocket(PORT, InetAddress.getByName(INADDR_ANY));
		serverSocket.setBroadcast(true);
	}

	@Override
	public void sendData(byte[] buffer) throws IOException {
		// TODO Auto-generated method stub
	}

	@Override
	public void killThread() {
		// TODO Auto-generated method stub

	}

}
