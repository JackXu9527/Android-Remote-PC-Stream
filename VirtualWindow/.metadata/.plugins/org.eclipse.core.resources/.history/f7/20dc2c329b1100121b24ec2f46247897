package com.virtualwindow.jason;

import java.io.IOException;
import java.math.BigInteger;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.content.Context;
import android.net.DhcpInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.TextView;

import com.virtualwindow.media.StreamingMediaPlayer;

public class VirtualWindowActivity extends Activity {

	private Button streamButton;

	private ImageButton playButton;

	private TextView textStreamed;

	private boolean isPlaying;

	private StreamingMediaPlayer audioStreamer;

	/**
	 * Called when the activity is first created.
	 */
	public void onCreate(Bundle icicle) {
		super.onCreate(icicle);
		//becomeServer();
		//becomeClient();
		getBroadcastAddresses();
	}
	
	public ArrayList<InetAddress> getBroadcastAddresses(){
		List<InetAddress> inets = new ArrayList<InetAddress>();
		try {
			
			WifiManager wifi = (WifiManager) this.getSystemService(Context.WIFI_SERVICE);
			DhcpInfo dhcp = wifi.getDhcpInfo();
			int broadcast = dhcp.ipAddress | (~ dhcp.netmask);
			byte[] broadbytes = new byte[4];
			for(int i = 0; i < 4; i++){
				broadbytes[i] = (byte) (0xff & broadcast >> i * 8);
			}
			InetAddress broad = InetAddress.getByAddress(broadbytes);

			Log.e("z", "broadcast: " + broad.toString());
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
		/*String ip = dhcp.ipAddress;*/
		return inets;
	}

	public void becomeServer() {
		/*WifiManager wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE);

		if (wifi != null) {
			WifiManager.MulticastLock lock = wifi
					.createMulticastLock("Log_Tag");
			lock.acquire();
			Log.e("bc", "lock");
		}*/
		DatagramSocket socket = null;
		try {
			socket = new DatagramSocket(8888, InetAddress.getByName("0.0.0.0"));

			socket.setBroadcast(true);

			//socket.setSoTimeout(5000);
		} catch (SocketException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		while (true) {
			try {
				byte[] buffer = new byte[1024];
				DatagramPacket packet = new DatagramPacket(buffer,
						buffer.length);
				Log.e("bc", "Waiting for a reply");
				socket.receive(packet);
				String receivedString = new String(buffer);
				Log.e("bc", "Received from phone: " + receivedString);
				break;
			} catch (SocketException e) {
				// TODO Auto-generated catch block
				// e.printStackTrace();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				// e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				// e.printStackTrace();
			}
		}
	}
	
	

	public void becomeClient() {
		String helloServer = "Yo!";
		byte[] buffer = helloServer.getBytes();
		WifiManager wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE);

		if (wifi != null) {
			WifiManager.MulticastLock lock = wifi
					.createMulticastLock("Log_Tag");
			lock.acquire();
			Log.e("bc", "lock");
		}
		try {
			DatagramSocket socket = new DatagramSocket();
			socket.setBroadcast(true);
			// while (true) {

			DatagramPacket packet = new DatagramPacket(buffer, buffer.length,
					InetAddress.getByName("255.255.255.255"), 9999);
			socket.send(packet);
			Log.e("bc", "sent a message");

			DatagramPacket packet2 = new DatagramPacket(buffer, buffer.length,
					InetAddress.getByName("192.168.255.255"), 9999);
			Log.e("bc", "broadcast: " + getBroadcastAddress().toString());
			socket.send(packet2);
			Log.e("bc", "sent a message 2");
			// Thread.sleep(500);
			// }
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	

	InetAddress getBroadcastAddress() throws IOException {
		WifiManager wifi = (WifiManager) getApplicationContext()
				.getSystemService(Context.WIFI_SERVICE);
		DhcpInfo dhcp = wifi.getDhcpInfo();
		// handle null somehow

		int broadcast = (dhcp.ipAddress & dhcp.netmask) | ~dhcp.netmask;
		byte[] quads = new byte[4];
		for (int k = 0; k < 4; k++)
			quads[k] = (byte) ((broadcast >> k * 8) & 0xFF);
		return InetAddress.getByAddress(quads);
	}
}